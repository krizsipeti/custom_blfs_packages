<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY libvirt-download-http "https://gitlab.com/libvirt/libvirt/-/archive/v11.2.0/libvirt-v11.2.0.tar.gz">
  <!ENTITY libvirt-download-ftp  " ">
  <!ENTITY libvirt-md5sum        "3627d2a22e57162885083aecc038e940">
  <!ENTITY libvirt-size          "12.6 MB">
  <!ENTITY libvirt-buildsize     "150 MB">
  <!ENTITY libvirt-time          "1 SBU (using parallelism=4)">
]>

<sect1 id="libvirt" xreflabel="libvirt-&libvirt-version;">
  <?dbhtml filename="libvirt.html"?>


  <title>libvirt-&libvirt-version;</title>

  <indexterm zone="libvirt">
    <primary sortas="a-libvirt">libvirt</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to libvirt</title>

    <para>
      <application>libvirt</application> is a toolkit to manage virtualization platforms, providing a unified API for interacting with various hypervisors, containers, and other virtualization technologies.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download (HTTP): <ulink url="&libvirt-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&libvirt-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &libvirt-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &libvirt-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &libvirt-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &libvirt-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">libvirt Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
        <xref linkend="python3"/>, and
        <xref linkend="libnl"/>, and
        <xref linkend="libpcap"/>, and
        <xref linkend="qemu"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation of libvirt</title>

    <para>
      Install <application>libvirt</application> by running the
      following commands:
    </para>

<screen><userinput>export QEMU_PACK="$(find ../.. -iname qemu-*.tar.*)"  &amp;&amp;
tar --strip-components=3 -C subprojects/keycodemapdb/ -xf "$QEMU_PACK" $(tar -tvf "$QEMU_PACK" | grep -m1 keycodemapdb | awk -F' ' '{print $NF}') &amp;&amp;
meson setup build --prefix=/usr --buildtype=release -Ddriver_qemu=enabled -Dnss=disabled -Dtests=disabled -Dqemu_group=libvirt-qemu -Dqemu_user=libvirt-qemu &amp;&amp;
ninja -C build</userinput></screen>

    <para>
      This package does not come with a test suite.
    </para>

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>sudo ninja -C build install</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlogd.service &lt;&lt; "EOF"
[Unit]
Description=libvirt logging daemon
Documentation=man:virtlogd(8)
Documentation=https://libvirt.org/
BindsTo=virtlogd.socket
Wants=virtlogd-admin.socket
After=virtlogd.socket
After=virtlogd-admin.socket

[Service]
Type=notify
Environment=VIRTLOGD_ARGS=
EnvironmentFile=-/etc/default/virtlogd
ExecStart=/usr/sbin/virtlogd $VIRTLOGD_ARGS
ExecReload=/bin/kill -USR1 $MAINPID
CapabilityBoundingSet=~CAP_AUDIT_CONTROL
CapabilityBoundingSet=~CAP_AUDIT_READ
CapabilityBoundingSet=~CAP_AUDIT_WRITE
CapabilityBoundingSet=~CAP_BLOCK_SUSPEND
CapabilityBoundingSet=~CAP_CHOWN
# Mgmt app/user might have pre-created log files that we're
# told to open and write to, or be storing them in otherwise
# inaccessible locations like $HOME. So we need to ignore
# DAC permission checks.
#CapabilityBoundingSet=~CAP_DAC_OVERRIDE
#CapabilityBoundingSet=~CAP_DAC_READ_SEARCH
CapabilityBoundingSet=~CAP_FOWNER
CapabilityBoundingSet=~CAP_FSETID
CapabilityBoundingSet=~CAP_IPC_LOCK
CapabilityBoundingSet=~CAP_IPC_OWNER
CapabilityBoundingSet=~CAP_KILL
CapabilityBoundingSet=~CAP_LEASE
CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE
CapabilityBoundingSet=~CAP_MAC_ADMIN
CapabilityBoundingSet=~CAP_MAC_OVERRIDE
CapabilityBoundingSet=~CAP_MKNOD
CapabilityBoundingSet=~CAP_NET_ADMIN
CapabilityBoundingSet=~CAP_NET_BIND_SERVICE
CapabilityBoundingSet=~CAP_NET_BROADCAST
CapabilityBoundingSet=~CAP_NET_RAW
CapabilityBoundingSet=~CAP_SETFCAP
CapabilityBoundingSet=~CAP_SETPCAP
CapabilityBoundingSet=~CAP_SETGID
CapabilityBoundingSet=~CAP_SETUID
CapabilityBoundingSet=~CAP_SYSLOG
CapabilityBoundingSet=~CAP_SYS_ADMIN
CapabilityBoundingSet=~CAP_SYS_BOOT
CapabilityBoundingSet=~CAP_SYS_CHROOT
CapabilityBoundingSet=~CAP_SYS_MODULE
CapabilityBoundingSet=~CAP_SYS_NICE
CapabilityBoundingSet=~CAP_SYS_PACCT
CapabilityBoundingSet=~CAP_SYS_PTRACE
CapabilityBoundingSet=~CAP_SYS_RAWIO
CapabilityBoundingSet=~CAP_SYS_RESOURCE
CapabilityBoundingSet=~CAP_SYS_TIME
CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG
CapabilityBoundingSet=~CAP_WAKE_ALARM
LockPersonality=true
MemoryDenyWriteExecute=true
# Cannot enable this as it prevents transitioning to
# the confined SELinux virtlogd_t domain on execve
# unless we modify the policy to allow this.
#NoNewPrivileges=true
PrivateDevices=true
PrivateMounts=true
PrivateNetwork=true
# XXX someone could configure QEMU to log a serial port to an
# arbitrary directory, including /tmp, even if this is ill-advised
#PrivateTmp=true
# Not until oldest build target has systemd &gt;= v245
#ProtectClock=true
ProtectControlGroups=true
# Not until oldest build target has systemd &gt;= v241
#ProtectHostname=true
# Not until oldest build target has systemd &gt;= v244
#ProtectKernelLogs=true
ProtectKernelModules=true
ProtectKernelTunables=true
# Not until oldest build target has systemd &gt;= v247
#ProtectProc=invisible
ProtectSystem=full
RestrictAddressFamilies=AF_UNIX
RestrictNamespaces=~cgroup
RestrictNamespaces=~ipc
RestrictNamespaces=~mnt
RestrictNamespaces=~net
RestrictNamespaces=~pid
RestrictNamespaces=~user
RestrictNamespaces=~uts
RestrictRealtime=true
RestrictSUIDSGID=true
SystemCallArchitectures=native
SystemCallFilter=~@clock
SystemCallFilter=~@debug
SystemCallFilter=~@module
SystemCallFilter=~@mount
SystemCallFilter=~@raw-io
SystemCallFilter=~@reboot
SystemCallFilter=~@swap
SystemCallFilter=~@privileged
# Unfortunately we link to libnuma via libvirt.so which
# has a constructor that runs unconditionally that invokes
# set_mempolicy()
#SystemCallFilter=~@resources
SystemCallFilter=~@cpu-emulation
SystemCallFilter=~@obsolete
UMask=077
# Losing this daemon is a really bad thing that will
# cause the machine to be fenced (rebooted), so make
# sure we discourage OOM killer
OOMScoreAdjust=-900
# Raise hard limits to match behaviour of systemd &gt;= 240.
# During startup, daemon will set soft limit to match hard limit
# per systemd recommendations
LimitNOFILE=1024:524288

[Install]
WantedBy=multi-user.target
Also=virtlogd.socket
Also=virtlogd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlockd.service &lt;&lt; "EOF"
[Unit]
Description=libvirt locking daemon
Documentation=man:virtlockd(8)
Documentation=https://libvirt.org/
BindsTo=virtlockd.socket
Wants=virtlockd-admin.socket
After=virtlockd.socket
After=virtlockd-admin.socket

[Service]
Type=notify
Environment=VIRTLOCKD_ARGS=
EnvironmentFile=-/etc/default/virtlockd
ExecStart=/usr/sbin/virtlockd $VIRTLOCKD_ARGS
ExecReload=/bin/kill -USR1 $MAINPID
# Losing this daemon is a really bad thing that will
# cause the machine to be fenced (rebooted), so make
# sure we discourage OOM killer
OOMScoreAdjust=-900
# Raise hard limits to match behaviour of systemd &gt;= 240.
# During startup, daemon will set soft limit to match hard limit
# per systemd recommendations
LimitNOFILE=1024:524288

[Install]
WantedBy=multi-user.target
Also=virtlockd.socket
Also=virtlockd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd-tls.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon TLS IP socket
BindsTo=libvirtd.socket
After=libvirtd.socket

[Socket]
ListenStream=16514
Service=libvirtd.service

[Install]
WantedBy=sockets.target
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd-ro.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon read-only socket
BindsTo=libvirtd.socket
After=libvirtd.socket

[Socket]
ListenStream=/run/libvirt/libvirt-sock-ro
Service=libvirtd.service
SocketMode=0666
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=libvirtd.socket
Also=libvirtd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon socket

[Socket]
ListenStream=/run/libvirt/libvirt-sock
Service=libvirtd.service
SocketMode=0660
SocketUser=root
SocketGroup=libvirt
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=libvirtd-ro.socket
Also=libvirtd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd-tcp.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon non-TLS IP socket
BindsTo=libvirtd.socket
After=libvirtd.socket

[Socket]
ListenStream=16509
Service=libvirtd.service

[Install]
WantedBy=sockets.target
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd.service &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon
Documentation=man:libvirtd(8)
Documentation=https://libvirt.org/
# Use Wants instead of Requires so that users
# can disable these three .socket units to revert
# to a traditional non-activation deployment setup
Wants=libvirtd.socket
Wants=libvirtd-ro.socket
Wants=libvirtd-admin.socket
After=libvirtd.socket
After=libvirtd-ro.socket
After=libvirtd-admin.socket
Requires=virtlogd.socket
Wants=virtlockd.socket
After=virtlogd.socket
After=virtlockd.socket
Wants=systemd-machined.service
After=network.target
After=dbus.service
After=iscsid.service
After=apparmor.service
After=remote-fs.target
After=systemd-machined.service
After=xencommons.service
After=qemu-kvm.service
Conflicts=xendomains.service

[Service]
Type=notify
Environment=LIBVIRTD_ARGS="--timeout 120"
EnvironmentFile=-/etc/default/libvirtd
ExecStart=/usr/sbin/libvirtd $LIBVIRTD_ARGS
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
# Raise hard limits to match behaviour of systemd &lt;= 240.
# During startup, daemon will set soft limit to match hard limit
# per systemd recommendations
LimitNOFILE=1024:524288
# The cgroups pids controller can limit the number of tasks started by
# the daemon, which can limit the number of domains for some hypervisors.
# A conservative default of 8 tasks per guest results in a TasksMax of
# 32k to support 4096 guests.
TasksMax=32768
# With cgroups v2 there is no devices controller anymore, we have to use
# eBPF to control access to devices. In order to do that we create a eBPF
# hash MAP which locks memory. The default map size for 64 devices together
# with program takes 12k per guest. After rounding up we will get 64M to
# support 4096 guests.
LimitMEMLOCK=64M

[Install]
WantedBy=multi-user.target
Also=virtlockd.socket
Also=virtlogd.socket
Also=libvirtd.socket
Also=libvirtd-ro.socket
Also=libvirtd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virt-guest-shutdown.target &lt;&lt; "EOF"
[Unit]
Description=libvirt guests shutdown target
Documentation=https://libvirt.org/
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlockd-admin.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt locking daemon admin socket
BindsTo=virtlockd.socket
After=virtlockd.socket

[Socket]
ListenStream=/run/libvirt/virtlockd-admin-sock
Service=virtlockd.service
SocketMode=0600
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=virtlockd.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlockd.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt locking daemon socket

[Socket]
ListenStream=/run/libvirt/virtlockd-sock
Service=virtlockd.service
SocketMode=0600
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=virtlockd-admin.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlogd-admin.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt logging daemon admin socket
BindsTo=virtlogd.socket
After=virtlogd.socket

[Socket]
ListenStream=/run/libvirt/virtlogd-admin-sock
Service=virtlogd.service
SocketMode=0600
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=virtlogd.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirt-guests.service &lt;&lt; "EOF"
[Unit]
Description=libvirt guests suspend/resume service
Documentation=man:libvirt-guests(8)
Documentation=https://libvirt.org/
Requires=virt-guest-shutdown.target
After=network.target
After=time-sync.target
After=libvirtd.socket
After=virtqemud.socket
After=virtlxcd.socket
After=virtvboxd.socket
After=virtvzd.socket
After=virtxend.socket
After=virt-guest-shutdown.target

[Service]
EnvironmentFile=-/etc/default/libvirt-guests
# Hack just call traditional service until we factor
# out the code
ExecStart=/usr/lib/libvirt/libvirt-guests.sh start
ExecStop=/usr/lib/libvirt/libvirt-guests.sh stop
Type=oneshot
RemainAfterExit=yes
StandardOutput=journal+console
TimeoutStopSec=0

[Install]
WantedBy=multi-user.target
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/libvirtd-admin.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt legacy monolithic daemon admin socket
BindsTo=libvirtd.socket
After=libvirtd.socket

[Socket]
ListenStream=/run/libvirt/libvirt-admin-sock
Service=libvirtd.service
SocketMode=0600
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=libvirtd.socket
Also=libvirtd-ro.socket
EOF</userinput></screen>

<screen role="root"><userinput>cat &gt; /usr/lib/systemd/system/virtlogd.socket &lt;&lt; "EOF"
[Unit]
Description=libvirt logging daemon socket

[Socket]
ListenStream=/run/libvirt/virtlogd-sock
Service=virtlogd.service
SocketMode=0600
RemoveOnStop=yes

[Install]
WantedBy=sockets.target
Also=virtlogd-admin.socket
EOF</userinput></screen>
  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directory</segtitle>

      <seglistitem>
	<seg>
          libvirt
        </seg>
        <seg>
          None
        </seg>
        <seg>
          /usr/share/libvirt
        </seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

</sect1>